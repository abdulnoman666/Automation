// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UITestAutomation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Disputes")]
    public partial class DisputesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Disputes.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Disputes", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
 #line hidden
#line 4
  testRunner.Given("User log into Dispute Tracking Application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
  testRunner.And("User should be able to see Dashboard in Application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Disputes")]
        [NUnit.Framework.CategoryAttribute("Disputes")]
        public virtual void Disputes()
        {
            string[] tagsOfScenario = new string[] {
                    "Disputes"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Disputes", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
 this.FeatureBackground();
#line hidden
#line 9
 testRunner.Given("User clicks the Disputes Icon on Dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.And("User selects the Disputes option from the drop down menu of the Disputes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "UI Controls"});
                table31.AddRow(new string[] {
                            "Alerts"});
                table31.AddRow(new string[] {
                            "Search and set date range"});
                table31.AddRow(new string[] {
                            "Select User or Search in list..."});
                table31.AddRow(new string[] {
                            "Refresh Submissions"});
                table31.AddRow(new string[] {
                            "Show Closed Disputes"});
                table31.AddRow(new string[] {
                            "1"});
                table31.AddRow(new string[] {
                            "2"});
                table31.AddRow(new string[] {
                            "3"});
                table31.AddRow(new string[] {
                            "4"});
                table31.AddRow(new string[] {
                            "5"});
                table31.AddRow(new string[] {
                            "6"});
                table31.AddRow(new string[] {
                            "Links"});
                table31.AddRow(new string[] {
                            "Reported"});
                table31.AddRow(new string[] {
                            "Days"});
                table31.AddRow(new string[] {
                            "Status"});
                table31.AddRow(new string[] {
                            "Detail"});
                table31.AddRow(new string[] {
                            "Resolution"});
                table31.AddRow(new string[] {
                            "Amount"});
                table31.AddRow(new string[] {
                            "Recovered"});
                table31.AddRow(new string[] {
                            "Customer"});
                table31.AddRow(new string[] {
                            "Assigned To"});
                table31.AddRow(new string[] {
                            "Status Field"});
                table31.AddRow(new string[] {
                            "Resolution Field"});
                table31.AddRow(new string[] {
                            "Amount Field"});
                table31.AddRow(new string[] {
                            "Customer Field"});
                table31.AddRow(new string[] {
                            "Edit Dispute"});
                table31.AddRow(new string[] {
                            "View Original Submission"});
#line 11
 testRunner.And("User validates the following UI Controls on the Disputes Page", ((string)(null)), table31, "And ");
#line hidden
#line 40
    testRunner.And("User clicks the Settings Button on the Disputes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table32.AddRow(new string[] {
                            "Reported"});
                table32.AddRow(new string[] {
                            "Days"});
                table32.AddRow(new string[] {
                            "Status"});
                table32.AddRow(new string[] {
                            "Detail"});
                table32.AddRow(new string[] {
                            "Resolution"});
                table32.AddRow(new string[] {
                            "Amount"});
                table32.AddRow(new string[] {
                            "Recovered"});
                table32.AddRow(new string[] {
                            "Customer"});
                table32.AddRow(new string[] {
                            "Assigned To"});
#line 41
 testRunner.And("User validates the following fields on the Settings Page", ((string)(null)), table32, "And ");
#line hidden
#line 52
 testRunner.And("User clicks the close button on customized page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
    testRunner.And("User clicks the Search Button on the Disputes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table33.AddRow(new string[] {
                            "Start Date"});
                table33.AddRow(new string[] {
                            "End Date"});
                table33.AddRow(new string[] {
                            "Search"});
                table33.AddRow(new string[] {
                            "Reset"});
                table33.AddRow(new string[] {
                            "Status"});
                table33.AddRow(new string[] {
                            "Full Card Number"});
                table33.AddRow(new string[] {
                            "Full Account Number"});
                table33.AddRow(new string[] {
                            "* Search"});
                table33.AddRow(new string[] {
                            "Reset 2"});
                table33.AddRow(new string[] {
                            "Close"});
#line 54
 testRunner.And("User validates the following fields on the Search Page", ((string)(null)), table33, "And ");
#line hidden
#line 66
 testRunner.And("user clicks the close button on search page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
    testRunner.And("User clicks the Edit Disputes Button on the Disputes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "UI Controls and Fields"});
                table34.AddRow(new string[] {
                            "Research Status"});
                table34.AddRow(new string[] {
                            "Documents"});
                table34.AddRow(new string[] {
                            "History"});
                table34.AddRow(new string[] {
                            "Refresh"});
                table34.AddRow(new string[] {
                            "Submission Disputes"});
                table34.AddRow(new string[] {
                            "Save"});
                table34.AddRow(new string[] {
                            "View Submission"});
                table34.AddRow(new string[] {
                            "Resolution Button"});
                table34.AddRow(new string[] {
                            "Print Letter"});
                table34.AddRow(new string[] {
                            "POS"});
                table34.AddRow(new string[] {
                            "Foreign Transaction"});
                table34.AddRow(new string[] {
                            "Research"});
                table34.AddRow(new string[] {
                            "Detail"});
                table34.AddRow(new string[] {
                            "Closed"});
                table34.AddRow(new string[] {
                            "Close Date"});
                table34.AddRow(new string[] {
                            "Pre-Arbitration"});
                table34.AddRow(new string[] {
                            "Final Resolution Date"});
                table34.AddRow(new string[] {
                            "Enter Notes"});
                table34.AddRow(new string[] {
                            "Customer Provisional Credit"});
                table34.AddRow(new string[] {
                            "Transaction Amount"});
                table34.AddRow(new string[] {
                            "Provisional Credit Amount"});
                table34.AddRow(new string[] {
                            "Consumer Liability"});
                table34.AddRow(new string[] {
                            "Denial Reason"});
                table34.AddRow(new string[] {
                            "PC Reversal Date"});
                table34.AddRow(new string[] {
                            "Provisional Credit Received"});
                table34.AddRow(new string[] {
                            "Provisional Date"});
                table34.AddRow(new string[] {
                            "Provisional Credit Removed"});
                table34.AddRow(new string[] {
                            "Removal Date"});
                table34.AddRow(new string[] {
                            "Final Credit"});
                table34.AddRow(new string[] {
                            "Final Date"});
                table34.AddRow(new string[] {
                            "Document Received from Processor"});
                table34.AddRow(new string[] {
                            "Documents Sent to Cardholder"});
                table34.AddRow(new string[] {
                            "Date Research Ended"});
                table34.AddRow(new string[] {
                            "Date Resolution Letter Sent"});
#line 68
 testRunner.And("User validates the following UI Controls and fields on the Edit Disputes Page", ((string)(null)), table34, "And ");
#line hidden
#line 104
    testRunner.And("User clicks the Resolution Button on the Edit Disputes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table35.AddRow(new string[] {
                            "Claim Result"});
                table35.AddRow(new string[] {
                            "Pending"});
                table35.AddRow(new string[] {
                            "Claim Approved"});
                table35.AddRow(new string[] {
                            "Claim Declined"});
                table35.AddRow(new string[] {
                            "Merchant Credit"});
                table35.AddRow(new string[] {
                            "Loss Status"});
                table35.AddRow(new string[] {
                            "Not Selected"});
                table35.AddRow(new string[] {
                            "Bank Loss"});
                table35.AddRow(new string[] {
                            "Merchant Loss"});
                table35.AddRow(new string[] {
                            "Consumer Loss"});
                table35.AddRow(new string[] {
                            "Amount Recovered"});
                table35.AddRow(new string[] {
                            "Provisional Date"});
                table35.AddRow(new string[] {
                            "Final Date"});
                table35.AddRow(new string[] {
                            "PC Reversal Date"});
                table35.AddRow(new string[] {
                            "Credit Customer Account For"});
                table35.AddRow(new string[] {
                            "Debit Customer Account For"});
                table35.AddRow(new string[] {
                            "Merchant Credited Customer For"});
                table35.AddRow(new string[] {
                            "Resolve and Post to GL"});
                table35.AddRow(new string[] {
                            "Close"});
                table35.AddRow(new string[] {
                            "Save"});
#line 105
 testRunner.And("User validates the following fields on the Resolution Page", ((string)(null)), table35, "And ");
#line hidden
#line 127
 testRunner.And("user clicks the close button on resolution page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
  testRunner.And("User clicks the Documents button on the Edit Disputes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table36.AddRow(new string[] {
                            "Document List"});
#line 129
 testRunner.And("User validates the following fields on the Documents Page", ((string)(null)), table36, "And ");
#line hidden
#line 132
    testRunner.And("User clicks the History button on the Edit Disputes Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fields"});
                table37.AddRow(new string[] {
                            "Date"});
                table37.AddRow(new string[] {
                            "Description"});
                table37.AddRow(new string[] {
                            "By"});
                table37.AddRow(new string[] {
                            "Type"});
#line 133
 testRunner.And("User validates the following fields on the History Page", ((string)(null)), table37, "And ");
#line hidden
#line 139
 testRunner.And("User clicks the Dashboard Icon", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
